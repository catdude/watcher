--
-- Descriptive text on how to accomplish polling remote device via SNMP,
-- retrieving data, and storing into InfluxDB.
--
-- Revision history:
-- 15 Oct 2015, catdude - Original release
-- 16 Oct 2015, catdude - Greatly simplified process, renamed some tables
--

This is an overview of the new test plan I'm implementing in Go.

* The "TestItem" table will contain all single-line OIDs and the 
  line-item members of the OID tables that we want to retain in
  InfluxDB. We will use those items to match against returned
  values. All readings that aren't called out in TestItem will
  be ignored.


DETAILS
-----------------
Given a class of device to test (i.e. 1 for DNCCs), figure out which  
applications need to be performed:
    SELECT mID FROM application WHERE class=1
and read values into a slice (applSlice).

Using the slice of applications ,determine what OIDs need to be bulkwalked 
to retrieve all needed readings. For each row in applSlice:
    SELECT oid FROM test_item WHERE application = <mID>
and read values into a slice (oidSlice).

For each row in oidSlice,
    SELECT name FROM oid_name WHERE oid=<oid>
and add to a map of oid->name (nameMap)

Determine the IP addresses and community strings of all devices needing 
to be read:
    SELECT ip FROM hosts WHERE class=<class ID>
and add to a slice (hostSlice).

For each item in hostSlice, send an asynchronous bulkwalk request for 
all items in oidSlice (combine OIDs where possible).
    TBD

For each host, when callback indicates that all requested OIDs have been
received, separate indices from returned OID and grab value.
Given retvalconsisting of oid and val:
    var matched := false
    var ndxCount := 0
    var ndxSlice []int
    make (ndxSlice, 1)
    while ! matched {
        if name, ok := nameMap; ok {
            matched := true
            processData
        } else {
            <strip off everything after last period. Increment ndxCount.
            ndxSlice.append(stuff after last period)
        }

Prepare to insert into InfluxDB:
    series=<test_item.series>, host=<ip>, site=<siteID>, name=<oid_name.name>,
    index=<index octets separated by hyphens>, ndxN=<ndxSlice contents for each N in 
    len(ndxSlice)),value=<value from return line>
Insert into InfluxDB

